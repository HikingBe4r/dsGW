<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.project.groupware.persistent.mapper.EmployeeMapper">

	<insert id="insertEmployee" parameterType="employeeVO"
		statementType="PREPARED" useGeneratedKeys="true" keyProperty="id">
		insert
		into EMPLOYEE(NAME, EMAIL, hire_date, address,
		address_detail,
		password, phone, department_id, grade_id, status_id)
		VALUES(#{name},
		#{email}, sysdate, #{address}, #{addressDetail},
		#{password}, #{phone},
		#{departmentId}, #{gradeId}, #{statusId})
	</insert>

	<select id="selectAdmin" parameterType="String" statementType="PREPARED"
		resultType="adminVO">
		SELECT ID, PASSWORD
		FROM ADMIN
		WHERE ID = #{id}
	</select>

	<select id="selectEmployee" parameterType="string"
		statementType="PREPARED" resultType="employeeVO">
		SELECT ID, NAME, EMAIL,
		to_char(HIRE_DATE, 'YYYY/MM/DD') as hireDate, ADDRESS,
		ADDRESS_DETAIL
		as addressDetail,
		PASSWORD, PHONE, DEPARTMENT_ID as departmentId,
		GRADE_ID as gradeId,
		STATUS_ID as statusId
		FROM EMPLOYEE
		WHERE ID = #{id}
	</select>

	<select id="selectEmployeeFind" parameterType="employeeVO"
		statementType="PREPARED" resultType="employeeVO">
		SELECT ID, NAME, EMAIL,
		to_char(HIRE_DATE, 'YYYY/MM/DD') as hireDate, ADDRESS,
		ADDRESS_DETAIL
		as addressDetail,
		PASSWORD, PHONE, DEPARTMENT_ID as departmentId,
		GRADE_ID as gradeId,
		STATUS_ID as statusId
		FROM EMPLOYEE
		WHERE email = #{email} and name = #{name}
	</select>

	<select id="selectEmployeeList" parameterType="map"
		resultType="java.util.HashMap" statementType="PREPARED">
		select emp.ID as ID, emp.NAME as NAME, dept.NAME as DEPARTMENT,
		TO_CHAR(HIRE_DATE, 'YYYY/MM/DD') as HIREDATE, gr.GRADE as GRADE,
		st.STATUS as STATUS
		from EMPLOYEE emp, DEPARTMENT dept, GRADE gr,
		EMP_STATUS st
		where emp.DEPARTMENT_ID = dept.ID and emp.GRADE_ID =
		gr.ID and
		emp.STATUS_ID = st.ID and not gr.ID = 4
		<if test="keyword != 'all'">
			<choose>
				<when test="keyfield == 'id'">
					and emp.ID like '%' || #{keyword} || '%'
				</when>
				<when test="keyfield == 'name'">
					and emp.NAME like '%' || #{keyword} || '%'
				</when>
				<when test="keyfield == 'department'">
					and department '%' || #{keyword} || '%'
				</when>
				<when test="keyfield == 'hiredate'">
					and hire_date like '%' || #{keyword} || '%'
				</when>
				<when test="keyfield == 'grade'">
					and grade like '%' || #{keyword} || '%'
				</when>
			</choose>
		</if>
		ORDER BY hire_date DESC
	</select>

	<update id="updateEmployee" parameterType="employeeVO"
		statementType="PREPARED">
		UPDATE employee
		<trim prefix="SET" suffixOverrides=",">
			<if test="email != null and email != ''">
				email = #{email} ,
			</if>
			<if test="address != null and address != ''">
				address = #{address} ,
			</if>
			<if test="addressDetail != null and addressDetail != ''">
				ADDRESS_DETAIL = #{addressDetail} ,
			</if>
			<if test="password != null and password != ''">
				password = #{password} ,
			</if>
			<if test="phone != null and phone != ''">
				phone = #{phone} ,
			</if>
			<if test="departmentId != null and departmentId != ''">
				DEPARTMENT_ID = #{departmentId} ,
			</if>
			<if test="gradeId != null and gradeId != ''">
				GRADE_ID = #{gradeId} ,
			</if>
			<if test="statusId != null and statusId != ''">
				STATUS_ID = #{statusId}
			</if>
		</trim>
		WHERE ID = #{id}
	</update>


	<select id="selectEmployeeDetail" parameterType="string"
		statementType="PREPARED" resultType="employeeVO">
		SELECT
		e.ID,
		e.NAME,
		e.EMAIL,
		to_char(e.HIRE_DATE, 'YYYY/MM/DD') as hireDate,
		e.ADDRESS,
		e.ADDRESS_DETAIL as addressDetail,
		e.PASSWORD,
		e.PHONE,
		d.name as departmentId,
		g.grade as gradeId,
		es.status as statusId
		FROM EMPLOYEE e, DEPARTMENT d, GRADE g, EMP_STATUS es
		WHERE e.id = #{value}
		AND e.department_id = d.id
		AND e.grade_id = g.id
		AND e.status_id = es.id
	</select>

	<select id="selectEmployeeDetailList" parameterType="map"
		statementType="PREPARED" resultType="employeeVO">
		SELECT
		e.ID,
		e.NAME,
		e.EMAIL,
		to_char(e.HIRE_DATE, 'YYYY/MM/DD') as hireDate,
		e.ADDRESS,
		e.ADDRESS_DETAIL as addressDetail,
		e.PASSWORD,
		e.PHONE,
		d.name as departmentId,
		g.grade as gradeId,
		es.status as statusId
		FROM EMPLOYEE e, DEPARTMENT d, GRADE g, EMP_STATUS es
		WHERE e.department_id = d.id
		AND e.grade_id = g.id
		AND e.status_id =
		es.id
		<if test="keyword != 'all'">
			<choose>
				<when test="keyfield == 'id'">
					and e.ID like '%' || #{keyword} || '%'
				</when>
				<when test="keyfield == 'name'">
					and e.NAME like '%' || #{keyword} || '%'
				</when>
				<when test="keyfield == 'department'">
					and d.name '%' || #{keyword} || '%'
				</when>
				<when test="keyfield == 'grade'">
					and g.grade like '%' || #{keyword} || '%'
				</when>
			</choose>
		</if>
		ORDER BY e.department_id, e.grade_id
	</select>

	<select id="selectGrade" statementType="STATEMENT" resultType="java.util.HashMap">
		SELECT GRADE
		FROM GRADE
		ORDER BY ID
	</select>

	<select id="selectStatus" statementType="STATEMENT" resultType="java.util.HashMap">
		SELECT STATUS
		FROM EMP_STATUS
		ORDER BY ID

	</select>
	
	<select id="selectEmployeeByDepartment" parameterType="string"
		statementType="PREPARED" resultType="employeeVO">
		SELECT
			e.ID,
			e.NAME,
			e.EMAIL,
			to_char(e.HIRE_DATE, 'YYYY/MM/DD') as hireDate,
			e.ADDRESS,
			e.ADDRESS_DETAIL as addressDetail,
			e.PASSWORD,
			e.PHONE,
			d.name as departmentId,
			g.grade as gradeId,
			es.status as statusId
		FROM EMPLOYEE e, DEPARTMENT d, GRADE g, EMP_STATUS es
		WHERE d.id = #{value}
		AND e.department_id = d.id
		AND e.grade_id = g.id
		AND e.status_id = es.id
		ORDER BY e.grade_id
	</select>

</mapper>