<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.project.groupware.persistent.mapper.ApprovalLineMapper">

	<!-- 일반 결재선 추가-->
	<insert id="insertApprovalLine" parameterType="approvalLineVO" statementType="PREPARED"> 
		<selectKey keyProperty="id" statementType="STATEMENT" order="BEFORE" resultType="string">
			SELECT APPROVAL_LINE_ID_SEQ.NEXTVAL FROM DUAL
		</selectKey>
		
		INSERT INTO APPROVAL_LINE ( ID, EMPLOYEE_ID ) 
		VALUES ( #{id}, #{employeeId} )	
	</insert>
	
	<!-- 결재선 즐겨찾기 추가 -->
	<insert id="insertApprovalLineBookmark" parameterType="approvalLineVO" statementType="PREPARED"> 
		<selectKey keyProperty="id" statementType="STATEMENT" order="BEFORE" resultType="string">
			SELECT APPROVAL_LINE_ID_SEQ.NEXTVAL FROM DUAL
		</selectKey>
		
		INSERT INTO APPROVAL_LINE ( ID, EMPLOYEE_ID, SUBJECT ) 
		VALUES ( #{id}, #{employeeId}, #{subject} )	
	</insert>
	
	
	<!-- 결재자 추가 -->
	<insert id="insertApproverList" parameterType="map" statementType="PREPARED">
		insert all
		<foreach item="approver" collection="approverList">
			into approver(employee_id, step, approval_auth_id, approval_line_id)
			values (#{approver.employeeId}, #{approver.step}, #{approver.approvalAuthId}, #{approver.approvalLineId})
		</foreach>
		select * from dual
	</insert>
	
	
	<resultMap  id="selectApprovalLineListResultMap" type="approvalLineVO">
		<id column="id"					property="id"/>
		<result column="employee_id"	property="employeeId" />
		<result column="subject"		property="subject" />
		<collection property="approverList" ofType="approverVO" javaType="list">
			<id column="approver_id"					property="id" />
			<result column="approver_employee_id"		property="employeeId" />
			<result column="step"						property="step" />
			<result column="approval_auth_id"			property="approvalAuthId" />
			<result column="approval_line_id"			property="approvalLineId" />
		</collection>
	
	</resultMap>
	
	<!-- 결재선 즐겨찾기 조회 -->
	<select id="selectApprovalLineList" resultMap="selectApprovalLineListResultMap" statementType="PREPARED" parameterType="string">
		SELECT
			t1.id,
			t1.employee_id,
			t1.subject,
			t2.id as approver_id,
			t2.employee_id as approver_employee_id,
			t2.step,
			t2.approval_auth_id,
			t2.approval_line_id
		
		FROM approval_line t1, approver t2
		WHERE t1.id = t2.approval_line_id(+)
			AND t1.employee_id = #{value} 
			AND t1.subject is not null
		ORDER BY t1.id
			
	</select>
	
	<!-- 해당 결재선의 결재자 목록 조회 -->
	<select id="selectApproverList" resultType="approverVO" statementType="PREPARED" parameterType="string" >	
		SELECT
			id,
			employee_id as employeeId, 
			step,
			approval_auth_id as approvalAuthId,
			approval_line_id as approvalLineId	
		FROM approver
		WHERE approval_line_id = #{value} 
		ORDER BY ID 
	</select>

	<delete id="deleteApproverList" statementType="PREPARED" parameterType="string">
		DELETE FROM approver
		WHERE approval_line_id = #{value}
	</delete>
	
	
	<delete id="deleteApprovalLine" statementType="PREPARED" parameterType="string">
		DELETE FROM approval_line
		WHERE id = #{value}
	</delete>
	
	
	
	
	
	
	
	
	
	<!--
		결재자 목록 찾기. (문서번호) 
		t1: 해당 문서번호의 결재이력 조회(기안자 approverId 찾기)
		t2: t1의 결과에서 기안자의 approval Line 찾기
		t3: 해당 결재선(line)의 approver목록 조회
	 -->
	<select id="selectApproverListByDocumentId" resultType="approverVO" statementType="PREPARED" parameterType="String">
		SELECT 
			app.id, 
			app.approval_auth_id approvalAuthId, 
			app.approval_line_id approvalLineId, 
			app.employee_id employeeId, 
			app.step
		FROM approver app, (SELECT app.approval_line_id
		                    FROM approver app, (select apphis.approver_id
		                                        from approval_history apphis
		                                        where apphis.document_id = #{documentId}) t1
		                    WHERE app.id = t1.approver_id
		                      and app.approval_auth_id = 1)t2
		WHERE app.approval_line_id = t2.approval_line_id
		ORDER BY app.id ASC
	</select>

	<delete id="deleteApproverListByDocumentId" statementType="PREPARED" parameterType="int">
		DELETE FROM approver
		WHERE approval_line_id = #{value}
	</delete>

	<!--  
		t1: 해당 문서id(param)의 기안자 app.id, lineId 찾기. 
		t2: t1의 결과와 같은 line의 결재자 목록 조회
		
		조회결과: app.id 오름차순 정렬 (기안, 결재, 결재, 수신...)
	-->
	<select id="selectApproverMapByDocumentId" resultType="java.util.HashMap" parameterType="String" statementType="PREPARED">
		    SELECT 
		    	app.id appId, 
		    	emp.id employeeId, 
		    	emp.name ||' '|| grade.grade employeeName, 
		    	dept.name departmentName, 
		    	auth.auth appAuth, 
		    	empimg.system_file_name image
			FROM 
		      approver app, 
		      employee emp, 
		      emp_image empImg, 
		      grade, 
		      department dept, 
		      approval_auth auth,
				    (SELECT app.id, app.approval_line_id lineId
				      FROM approver app, approval_history apphis
				      WHERE app.id = apphis.approver_id
				        AND app.approval_auth_id = 1 
				        AND apphis.document_id = #{documentId}) t1
			WHERE app.employee_id = emp.id
		      AND app.approval_line_id = t1.lineid
		      AND emp.grade_id = grade.id
		      AND emp.id = empimg.employee_id(+)
		      AND empimg.kind(+) = 2
			  AND dept.id = emp.department_id
			  AND app.approval_auth_id = auth.id(+)
			  AND app.approval_auth_id != 3 
			ORDER BY app.id ASC
	</select>
	
	<!--
		문서의 현재 결재자 찾기
		param : 문서번호
		t1: 문서 결재한 가장 최근이력 id
		t2: t1의 결재자
		t3: t2와 같은 결재선, auth=2인 결재자중 step이 t2+1인 결재자.
		t4: t1의 결재자(최근결재자)가 반려이면 조회실패.
	 -->
	<select id="selectCurrentApprover" resultType="approverVO" parameterType="String">
		SELECT 
			app.id, 
			app.approval_auth_id approvalAuthId, 
			app.approval_line_id approvalLineId, 
			app.employee_id employeeId, 
			app.step
	    FROM approver app, 
	    	(SELECT app.id T2appId, app.step T2step, app.approval_line_id T2lineId, apphis.approval_status_id apphisStat
	         FROM approver app, approval_history apphis, 
	         	(SELECT max(apphis.id) id
	             FROM approval_history apphis, approver app
	             WHERE apphis.document_id = #{documentId}
	               AND app.id = apphis.approver_id(+)) t1
	         WHERE app.id = apphis.approver_id(+)
	           AND apphis.id = t1.id) t2
		WHERE app.approval_line_id = t2.t2lineid
          AND app.approval_auth_id = 2
          AND app.step = t2.t2step+1
          AND t2.apphisstat != 3
	</select>
	
	<!--
		해당문서를 결재완료한 결재자들의 employeeVO 조회
		t1: 해당문서 결재완료한 결재자들의 approverId
		t2: t1들의 employeeVO 
	 -->
	<select id="selectCompleteApproverList" resultType="java.util.HashMap" parameterType="String">
		SELECT
			app.id appId, 
		   	emp.id employeeId, 
		   	emp.name ||' '|| grade.grade employeeName,
		   	empimg.system_file_name image
		FROM 
			approver app, 
			employee emp, 
			emp_image empImg, 
			grade, 
			department dept,
			(SELECT apphis.approver_id
			   FROM approval_history apphis
			  WHERE apphis.document_id = #{documentId}) t1
		WHERE app.employee_id = emp.id
		  AND app.id in (t1.approver_id)
		  AND emp.grade_id = grade.id
		  AND emp.id = empimg.employee_id(+)
		  AND dept.id =	emp.department_id
		  AND empimg.kind(+) = 2
		  AND app.approval_auth_id = 2
	</select>
	
	<!-- 
		해당문서 결재자 목록 문서번호로. (상세조회때 씀)	
	 -->
	<select id="selectApproverListDetailDocument" resultType="java.util.HashMap" parameterType="java.util.HashMap" statementType="PREPARED">
		SELECT app.id appId, emp.name empName, grade.grade, dept.name deptName, auth.auth
		FROM employee emp, approver app, department dept, approval_auth auth, grade,
		  (SELECT distinct(app.approval_line_id)
		   FROM approval_history apphis, approver app
		   WHERE apphis.document_id = #{documentId}
		     AND app.id = apphis.approver_id) t1
		WHERE emp.id = app.employee_id
		  AND app.approval_line_id = t1.approval_line_id
		  AND emp.department_id = dept.id(+)
		  AND app.approval_auth_id = auth.id(+)
		  AND emp.grade_id = grade.id
		  <if test="kind == 1 and kind != null">
		  AND app.approval_auth_id != 3
		  </if>
		  <if test="kind == 2 and kind != null">
		  AND app.approval_auth_id = 3 
		  </if>
		ORDER BY appId ASC
	</select>
</mapper>