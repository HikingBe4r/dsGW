<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.project.groupware.persistent.mapper.DocumentMapper">

	<insert id="insertDocument" parameterType="documentVO" statementType="PREPARED" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
		<!-- <selectKey keyProperty="status" statementType="PREPARED" order="BEFORE" resultType="string">
			SELECT id 
			FROM DOCUMENT_STATUS
			WHERE status = #{status}	
		</selectKey> -->
		INSERT INTO DOCUMENT (form_id, subject, content, writeday, enddate, document_status_id )
		VALUES (#{formVO.id}, #{subject}, #{content}, sysdate, to_date(#{endDate}, 'YYYY/MM/DD'), #{status} )		
	</insert>


	<update id="updateDocumentStatus" parameterType="documentVO" statementType="PREPARED">
		UPDATE DOCUMENT
		SET DOCUMENT_STATUS_ID = #{status}
		WHERE ID = #{id}
	</update>
	
	
	<!--
		t1: 본인의 emp_id로 approval_line을 찾는다.
		t2: t1의 approval_line이 같은 approver 중 auth_id = 1(기안) 인 approver_id를 찾는다.
		t3: approval_history에서 approver_id가 t2의 결과와 같은 값의 document_id를 가진 문서의 정보를 select 한다.
		t4: t3의 결과물을 parameter인 hashmap에 맞게 검색한다. 
	 -->
	<select id="selectApprovalDocumentList" resultType="java.util.HashMap" parameterType="java.util.HashMap" statementType="PREPARED">  
		SELECT 
			doc.id, doc.subject, t2.name, TO_CHAR(doc.writeday, 'YYYY/MM/DD HH24:MI:SS') WRITEDAY, TO_CHAR(doc.enddate, 'YYYY/MM/DD HH24:MI:SS') ENDDATE, docstat.status
		FROM 
			document_status docstat, document doc, approval_history apphis,
			(SELECT app.id, emp.name
			 FROM approver app, employee emp, 
			 	(SELECT app.approval_line_id
			 	FROM approver app, employee emp
			 	WHERE emp.id = app.employee_id
			 	  AND emp.id = #{employeeId}) t1						<!-- 본인 empId -->
			 WHERE app.approval_line_id = t1.approval_line_id
			   AND   app.approval_auth_id = 1
			   AND   app.employee_id = emp.id) t2
		WHERE apphis.approver_id = t2.id
	 	  AND apphis.document_id = doc.id
		  AND doc.document_status_id = docstat.id
		  
		 <if test="keyword != null and kind != null">
			<if test="kind.equals('전체')">
				AND (doc.subject like '%' || #{keyword} || '%'
				OR t2.name like '%' || #{keyword} || '%')
			</if>
		
			<if test="kind.equals('제목')">
				AND doc.subject like '%' || #{keyword} || '%'
			</if>
		
			<if test="kind.equals('작성자')">
				AND t2.name like '%' || #{keyword} || '%'
			</if>
		</if>
		ORDER BY doc.id DESC
	</select>
	
	<resultMap type="documentVO" id="selectApprovalDocumentMap" autoMapping="true">
		<id property="id" column="documentId" />
		<result property="subject" column="docSubject" />
		<result property="content" column="content" />
		<result property="writeday" column="writeday" />
		<result property="endDate" column="enddate" />	
		<association property="formVO" javaType="formVO">
			<id property="id" column="formId" />
			<result property="subject" column="formSubject"/>
		</association>
		<collection property="documentFileList" javaType="documentFileVO">
			<id property="id" column="docFileId"/>
			<result property="originalFileName" column="original_file_name"/>
		</collection>
	</resultMap>
	
	<select id="selectApprovalDocument" resultMap="selectApprovalDocumentMap" parameterType="String" statementType="PREPARED">  
		SELECT 
			doc.id documentId, 
			doc.subject docSubject, 
			doc.content, 
			TO_CHAR(doc.writeday, 'YYYY/MM/DD HH24:MI:SS') writeday, 
			TO_CHAR(doc.enddate, 'YYYY/MM/DD HH24:MI:SS') enddate,
			form.id formId, 
			form.subject formSubject, 
			docFile.id docFileId,
			docFile.original_file_name
		FROM document doc, form, document_file docFile
		WHERE doc.id = #{documentId}
		  AND doc.form_id = form.id(+)
		  AND doc.id = docfile.document_id(+)
	</select>
	
	
	<!-- <select id="selectDocument" resultMap="selectDocumentMap" parameterType="String">
			
	</select> -->
	<select id="selectDocumentList" resultType="documentVO" statementType="PREPARED" parameterType="map">
		select 
		      doc.id,
		      doc.subject,
		      doc.writeday,
		      (select max(auth_date) from approval_history where ah.document_id = doc.id) as endDate,
		      emp.name as writer,
		      ds.status
		from document doc,
		        document_status ds,
		        approval_history ah,
		        approver ap,
		        employee emp
		where doc.document_status_id = ds.id
		          and doc.id = ah.document_id
		          and ah.approver_id = ap.id
		          and ap.employee_id = emp.id
		          and ap.step = 1
		          and ds.id = #{status}
		order by writeday desc
	</select>
	
	<insert id="insertBookMarkDocument" parameterType="bookMarkDocumentVO" statementType="PREPARED">
		<selectKey keyProperty="id" statementType="STATEMENT" order="BEFORE" resultType="int">
			select mydocs_id_seq.nextval from dual
		</selectKey>
		
		insert into mydocs (id, employee_id, document_id)
		values (#{id}, #{employeeId}, #{documentId})
	</insert>
	
	<delete id="deleteBookMarkDocument" parameterType="int" statementType="PREPARED">
		delete from mydocs
		where id = #{value}
	</delete>
	
</mapper>